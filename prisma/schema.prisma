generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model JobPosition {
  id           String     @id @default(uuid())
  jobName      String
  code         String
  description  String?
  positionId   String
  departmentId String
  isActive     Boolean    @default(true)
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  department   Department @relation(fields: [departmentId], references: [id], onDelete: Cascade)
  position     Position   @relation(fields: [positionId], references: [id], onDelete: Cascade)
  users        User[]

  @@unique([positionId, jobName, departmentId])
  @@map("job_positions")
}

model Office {
  id          String       @id @default(uuid())
  name        String       @unique
  type        OfficeType
  description String?
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  departments Department[]
  users       User[]

  @@map("offices")
}

model Department {
  id           String        @id @default(uuid())
  name         String
  description  String?
  officeId     String
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  office       Office        @relation(fields: [officeId], references: [id], onDelete: Cascade)
  jobPositions JobPosition[]

  @@unique([name, officeId])
  @@map("departments")
}

model Position {
  id           String        @id @default(uuid())
  name         String        @unique
  description  String?
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  jobPositions JobPosition[]

  @@map("positions")
}

model User {
  id            String      @id @default(uuid())
  employeeCode  String      @unique
  email         String?     @unique
  password      String
  firstName     String
  lastName      String
  cardId        String?     @unique
  role          Role        @default(USER)
  jobPositionId String
  isActive      Boolean     @default(true)
  officeId      String
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  reports       Report[]
  jobPosition   JobPosition @relation(fields: [jobPositionId], references: [id])
  office        Office      @relation(fields: [officeId], references: [id])

  @@map("users")
}

model Report {
  id          String       @id @default(uuid())
  weekNumber  Int
  year        Int
  userId      String
  isCompleted Boolean      @default(false)
  isLocked    Boolean      @default(false)
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  tasks       ReportTask[]
  user        User         @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([weekNumber, year, userId])
  @@index([userId])
  @@index([year, weekNumber])
  @@map("reports")
}

model ReportTask {
  id            String   @id @default(uuid())
  reportId      String
  taskName      String
  monday        Boolean  @default(false)
  tuesday       Boolean  @default(false)
  wednesday     Boolean  @default(false)
  thursday      Boolean  @default(false)
  friday        Boolean  @default(false)
  saturday      Boolean  @default(false)
  sunday        Boolean  @default(false)
  isCompleted   Boolean  @default(false)
  reasonNotDone String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  report        Report   @relation(fields: [reportId], references: [id], onDelete: Cascade)

  @@map("report_tasks")
}

enum Role {
  SUPERADMIN
  OFFICE_MANAGER
  OFFICE_ADMIN
  ADMIN
  USER
}

enum OfficeType {
  HEAD_OFFICE
  FACTORY_OFFICE
}
