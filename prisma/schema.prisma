// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["relationJoins"]
  binaryTargets   = ["native", "linux-musl-openssl-3.0.x"]
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model JobPosition {
  id           String     @id @default(uuid())
  jobName      String
  code         String
  description  String?
  positionId   String
  departmentId String
  officeId     String     // Denormalized for easier queries
  isActive     Boolean    @default(true)
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  department   Department @relation(fields: [departmentId], references: [id], onDelete: Cascade)
  position     Position   @relation(fields: [positionId], references: [id], onDelete: Cascade)
  office       Office     @relation(fields: [officeId], references: [id], onDelete: Cascade)
  users        User[]

  @@unique([positionId, jobName, departmentId])
  @@index([departmentId])
  @@index([positionId])
  @@index([isActive])
  @@index([officeId])
  @@map("job_positions")
}

model Office {
  id           String        @id @default(uuid())
  name         String        @unique
  type         OfficeType
  description  String?
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  departments  Department[]
  users        User[]
  jobPositions JobPosition[]

  @@index([type])
  @@map("offices")
}

model Department {
  id           String        @id @default(uuid())
  name         String
  description  String?
  officeId     String
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  office       Office        @relation(fields: [officeId], references: [id], onDelete: Cascade)
  jobPositions JobPosition[]
  managers     UserDepartmentManagement[]

  @@unique([name, officeId])
  @@index([officeId])
  @@map("departments")
}

model Position {
  id           String        @id @default(uuid())
  name         String        @unique
  description  String?
  level        Int           @default(0) // 0=CEO, 1=Deputy, 2=Manager, 3=Leader, 4=Staff
  priority     Int           @default(0) // Sort priority within same level
  isManagement Boolean       @default(false) // Is this a management position?
  isReportable Boolean       @default(true) // Should submit reports? (CEO = false)
  canViewHierarchy Boolean   @default(false) // Can view hierarchy reports? (Staff = false)
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  jobPositions JobPosition[]

  @@map("positions")
}

model User {
  id            String    @id @default(uuid())
  employeeCode  String    @unique
  email         String?   @unique
  password      String
  firstName     String
  lastName      String
  phone         String?   
  avatar        String?   // Firebase Storage URL for user avatar
  role          Role      @default(USER)
  jobPositionId String
  isActive      Boolean   @default(false)
  officeId      String    // Denormalized for easier queries
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  reports       Report[]
  evaluations   TaskEvaluation[]  // Tasks this user has evaluated
  jobPosition   JobPosition @relation(fields: [jobPositionId], references: [id])
  office        Office      @relation(fields: [officeId], references: [id])
  managedDepartments UserDepartmentManagement[] @relation("UserToManagedDepartments")

  @@index([jobPositionId])
  @@index([officeId])
  @@index([isActive])
  @@index([role])
  @@index([firstName, lastName])
  @@map("users")
}

model Report {
  id          String       @id @default(uuid())
  weekNumber  Int
  year        Int
  userId      String
  isCompleted Boolean      @default(false)
  isLocked    Boolean      @default(false)
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  tasks       ReportTask[]
  user        User         @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([weekNumber, year, userId])
  @@index([userId])
  @@index([year, weekNumber])
  @@index([isCompleted])
  @@index([isLocked])
  @@index([createdAt])
  @@map("reports")
}

model ReportTask {
  id            String          @id @default(uuid())
  reportId      String
  taskName      String
  monday        Boolean         @default(false)
  tuesday       Boolean         @default(false)
  wednesday     Boolean         @default(false)
  thursday      Boolean         @default(false)
  friday        Boolean         @default(false)
  saturday      Boolean         @default(false)
  isCompleted   Boolean         @default(false)
  reasonNotDone String?
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  report        Report          @relation(fields: [reportId], references: [id], onDelete: Cascade)
  evaluations   TaskEvaluation[]

  @@index([reportId])
  @@index([isCompleted])
  @@map("report_tasks")
}

model TaskEvaluation {
  id                String      @id @default(uuid())
  taskId            String
  evaluatorId       String
  originalIsCompleted Boolean   @default(false) // Original task completion status
  evaluatedIsCompleted Boolean  @default(false) // Manager's evaluation of completion
  originalReasonNotDone String? // Original reason for not completing
  evaluatedReasonNotDone String? // Manager's evaluation of the reason
  evaluatorComment  String?     // Manager's comment on the evaluation
  evaluationType    EvaluationType @default(REVIEW) // Type of evaluation
  createdAt         DateTime    @default(now())
  updatedAt         DateTime    @updatedAt
  task              ReportTask  @relation(fields: [taskId], references: [id], onDelete: Cascade)
  evaluator         User        @relation(fields: [evaluatorId], references: [id], onDelete: Cascade)

  @@unique([taskId, evaluatorId]) // One evaluation per task per evaluator
  @@index([taskId])
  @@index([evaluatorId])
  @@index([evaluationType])
  @@index([createdAt])
  @@map("task_evaluations")
}

model UserDepartmentManagement {
  id           String     @id @default(uuid())
  userId       String     // Manager's user ID
  departmentId String     // Department they manage
  isActive     Boolean    @default(true)
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  
  user         User       @relation("UserToManagedDepartments", fields: [userId], references: [id], onDelete: Cascade)
  department   Department @relation(fields: [departmentId], references: [id], onDelete: Cascade)
  
  @@unique([userId, departmentId])
  @@index([userId])
  @@index([departmentId])
  @@map("user_department_managements")
}

enum Role {
  SUPERADMIN
  ADMIN
  USER
}

enum OfficeType {
  HEAD_OFFICE
  FACTORY_OFFICE
}

enum EvaluationType {
  REVIEW        // General review/evaluation
  APPROVAL      // Approving task completion
  REJECTION     // Rejecting task completion
}
